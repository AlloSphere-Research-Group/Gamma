#=========================================================================
# Gamma make configuration
#=========================================================================

#=========================================================================
# Command-line options
# Modify for your system -or- use command-line argument OPTION=string
#=========================================================================
# Operating system; macosx, linux, or windows
PLATFORM	= macosx
#PLATFORM	= linux
#PLATFORM	= windows

# Architecture; 32, 64, or 32_64 (macosx only)
ARCH		= 32

# Mac OS X version; 10_4 or 10_5
OSX_VERSION	= 10_5

USING_PUREDYNE = 0

# Build configuration; release or debug
BUILD_CONFIG	= release
#BUILD_CONFIG	= debug

STRICT_WARNINGS = 1

#=========================================================================
# Customize to fit your system
#=========================================================================
PREFIX		= /usr/local
CONFPREFIX	= $(PREFIX)/etc
MANPREFIX	= $(PREFIX)/share/man

LIB_DIRS	= /usr/lib
INC_DIRS	= /usr/include
RINC_DIRS	= ./ ./external/include
CFLAGS		= -Wall -D__STDC_CONSTANT_MACROS
#		-fPIC

LFLAGS		= -lm -lstdc++
DLIBFLAGS	:= -Wl,-single_module

#-------------------------------------------------------------------------
# Default variables (may be overridden in platform specific section)
#-------------------------------------------------------------------------
AR		= ar cr
CC		= g++
INSTALL		= install
RANLIB		= ranlib
LIB_NAME	= gamma

BUILD_DIR	= build
SRC_DIR		= src
TEST_DIR	= tests
TUT_DIR		= tutorial

SLIB_EXT	= a
DLIB_EXT	= so
DLIB_OPT	= shared


#=========================================================================
# DO NOT EDIT BELOW!
#=========================================================================
#-------------------------------------------------------------------------
# Compilation flags
#-------------------------------------------------------------------------
ifeq ($(BUILD_CONFIG), release)
	CFLAGS += -O3 -fpeel-loops
else
endif

ifneq ($(STRICT_WARNINGS), 0)
	CFLAGS += \
		-Wreturn-type -Wnon-virtual-dtor -Woverloaded-virtual \
		-Wformat -Wmissing-braces -Wparentheses -Wswitch \
		-Wunused-variable -Wsign-compare -Wno-unknown-pragmas
endif

#-------------------------------------------------------------------------
# Platform specific flags
#-------------------------------------------------------------------------
ifeq ($(PLATFORM), linux)

	ifneq ($(USING_PUREDYNE), 0)
		CC      = gcc
		LFLAGS += /usr/lib/libportaudio.so.2 /usr/lib/libasound.so.2
	else
		LFLAGS += -lportaudio -lasound
	endif
	
	INC_DIRS  += $(PREFIX)/include
	LIB_DIRS  += $(PREFIX)/lib
	LFLAGS    += -lsndfile
	LFLAGS    += -lrt -lpthread
	CFLAGS    += -D__LINUX__
	ifeq ($(ARCH), 32)
		CFLAGS += -m32
	else ifeq ($(ARCH), 64)
		CFLAGS += -m64
	endif

else ifeq ($(PLATFORM), macosx)
	LIB_DIRS  += external/lib_osx
	LFLAGS    += -lsndfile -lportaudio
	LFLAGS    += $(addprefix -framework , AudioUnit AudioToolbox CoreAudio Carbon)
	ifeq ($(OSX_VERSION), 10_5)
		CFLAGS += -isysroot /Developer/SDKs/MacOSX10.5.sdk -mmacosx-version-min=10.5
	else ifeq ($(OSX_VERSION), 10_4)
		CFLAGS += -isysroot /Developer/SDKs/MacOSX10.4u.sdk -mmacosx-version-min=10.4
	endif
	ifeq ($(ARCH), 32)
		CFLAGS += -arch i386
	else ifeq ($(ARCH), 64)
		CFLAGS += -arch x86_64
	else ifeq ($(ARCH), 32_64)
		CFLAGS += -arch i386 -arch x86_64
	endif

	DLIB_EXT   = dylib
	DLIB_OPT   = dynamiclib

else ifeq ($(PLATFORM), windows)
#	LIB_DIRS  += external/lib_win32
#	LFLAGS    += ../external/lib_win32/libsndfile-1.lib ../external/lib_win32/portaudio_x86.lib
endif


#-------------------------------------------------------------------------
# Define dependent variables
#-------------------------------------------------------------------------
SLIB_FILE  = lib$(LIB_NAME).$(SLIB_EXT)
DLIB_FILE  = lib$(LIB_NAME).$(DLIB_EXT)
DLIBFLAGS := -$(SLIB_OPT) $(DLIBFLAGS)
#             -install_name @executable_path/$(DLIB_FILE)
BIN_DIR	= $(BUILD_DIR)/$(BUILD_CONFIG)
OBJ_DIR	= $(BIN_DIR)/obj

VPATH	= $(SRC_DIR)/ $(addprefix $(SRC_DIR)/, $(TEST_DIR) $(TUT_DIR))
